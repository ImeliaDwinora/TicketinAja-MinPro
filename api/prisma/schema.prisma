// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  CUSTOMER
  ORGANIZER
}

enum Category {
  MUSIC
  COMUNITY
  FAMILY
  EDUCATION
  WELLNESS
}

enum TransactionStatus {
  WAITING_PAYMENT
  WAITING_CONFIRMATION
  DONE
  REJECTED
  EXPIRED
  CANCELED
}

model User {
  id            String        @id @default(uuid())
  name          String        @db.VarChar(100)
  password      String
  role          Role
  email         String        @unique
  refferal_code String        @unique
  profilePic    String
  location      String
  latitude      Float?
  longitude     Float?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Event         Event[]
  Transaction   Transaction[]
  Attend        Attend[]
  Voucher       Voucher[]
  Coupon        Coupon[]
  Point         Point[]
  Review        Review[]
}

model Event {
  id          String   @id @default(uuid())
  organizer   User     @relation(fields: [organizerId], references: [id])
  organizerId String
  name        String
  description String
  location    String
  latitude    Float?
  longitude   Float?
  category    Category
  start_date  DateTime
  end_date    DateTime
  is_paid     Boolean
  price       Int
  quota       Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  TicketType  TicketType[]
  Transaction Transaction[]
  Attend      Attend[]
  Voucher     Voucher[]
  Review      Review[]
}

model TicketType {
  id          String        @id @default(uuid())
  event       Event         @relation(fields: [eventId], references: [id])
  eventId     String
  name        String
  price       Int
  stock       Int
  Transaction Transaction[]
}

model Transaction {
  id           String            @id @default(uuid())
  user         User              @relation(fields: [userId], references: [id])
  userId       String
  event        Event             @relation(fields: [eventId], references: [id])
  eventId      String
  ticketType   TicketType        @relation(fields: [ticketTypeId], references: [id])
  ticketTypeId String
  quantity     Int
  total_price  Int
  used_point   Int?
  final_price  Int
  voucher_code String?
  coupon_code  String?
  status       TransactionStatus
  created_at   DateTime          @default(now())
  updated_at   DateTime          @updatedAt

  paymentProof PaymentProof[]
  attendances  Attend[]
}

model PaymentProof {
  id            String      @id @default(uuid())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String
  image_url     String
  uploaded_at   DateTime    @default(now())
}

model Attend {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  event         Event       @relation(fields: [eventId], references: [id])
  eventId       String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String
  quantity      Int
  total_paid    Int
}

model Voucher {
  id         String   @id @default(uuid())
  code       String   @unique
  discount   Int
  quota      Int
  start_date DateTime
  end_date   DateTime
  event      Event    @relation(fields: [eventId], references: [id])
  eventId    String
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
}

model Coupon {
  id         String   @id @default(uuid())
  code       String   @unique
  discount   Int
  is_used    Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  created_at DateTime @default(now())
  expired_at DateTime
}

model Point {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  amount     Int
  created_at DateTime @default(now())
  expired_at DateTime
}

model Review {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  event      Event    @relation(fields: [eventId], references: [id])
  eventId    String
  rating     Int
  comment    String
  created_at DateTime @default(now())
}
